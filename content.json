{"meta":{"title":"lxw-peter的个人博客","subtitle":null,"description":null,"author":"lxw-peter","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"test","slug":"test","date":"2018-09-13T06:56:48.000Z","updated":"2018-09-13T06:59:15.634Z","comments":true,"path":"2018/09/13/test/","link":"","permalink":"http://yoursite.com/2018/09/13/test/","excerpt":"","text":"这是一个测试文件","categories":[],"tags":[]},{"title":"Git指令速查表","slug":"Git指令速查表","date":"2018-09-13T03:57:42.000Z","updated":"2018-09-13T07:33:22.377Z","comments":true,"path":"2018/09/13/Git指令速查表/","link":"","permalink":"http://yoursite.com/2018/09/13/Git指令速查表/","excerpt":"","text":"git安装git之后需要完成已下步骤 新建文件夹或者在已有项目的文件夹上创建版本库 右键点击空白处出现Git Bush Here 在终端输入git init命令把这个目录Git可以管理的仓库 1$ git init 一.文件的增删改查1.git add 此命令可以使用多次,添加多个文件到暂存区,指文件名 1$ git add readme.md 2.git commit -m 此命令将文件添加到版本库,并且可以一次提交多个文件 指版本备注 1$ git commit -m \"这是我的第一个版本\" 3.git status 此命令可以让我们时刻掌握仓库当前的状态 4.git diff 此命令可以查看具体修改了什么内容 5.git log 此命令可以查看历史记录,加上--pretty=oneline参数可以缩减部分信息 6.git reset –hard commit-idcommit-id(版本号) ,回退到以前的某个版本 1234$ git reset --hard adebea1...//commit id 简写,写几个数字或字母系统会自动查找匹配$ git reset --hard HEAD^ //回退到上一个版本$ git reset --hard HEAD^^ //回退到上上一个版本$ git reset --hard HEAD~100 //回退到前第一百个版本 7.git reflog查看命令历史,以便确定回退到未来的那个版本 12345$ git refloge475afc HEAD@&#123;1&#125;: reset: moving to HEAD^1094adb (HEAD -&gt; master) HEAD@&#123;2&#125;: commit: append GPLe475afc HEAD@&#123;3&#125;: commit: add distributedeaadf4e HEAD@&#123;4&#125;: commit (initial): wrote a readme file 8.cat 查看文件内容 123$ cat readme.md###我的第一个版本&lt;!-- 修改了第一个版本,增加此行 --&gt; 9. git checked –git checkout -- file可以丢弃工作区的修改,注意此处file前的– 不能省略 10. git rest HEAD 暂存区的修改撤销掉，重新放回工作区 11. git rm 在文件夹中直接删除文件,需要删除版本库中的文件, 使用git rm &lt;file&gt;,然后再git commit -m &quot;&lt;message&gt;&quot;则彻底删除文件 git rm -r --cached &lt;file&gt;删除仓库文件 12. git checked 如果删错文件了, 则可以使用git checked &lt;file&gt;,用版本库中的版本替换工作区中误删的文件 13. .gitignore 设置忽略文件及文件夹 在文件夹中创建文件名为.gitignore的文件 , /表示忽略当前文件夹下的文件或文件夹,写法如下: /.idea 忽略.idea文件 /js忽略js目录下的所有文件 /js/*.js忽略js目录下所有js文件 二.远程仓库第1步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：1$ ssh-keygen -t rsa -C \"youremail@example.com\" 如果一切顺利的话，可以在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。 第2步：登陆GitHub，打开”settings”，“SSH and GPG Keys”页面： 然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容： 点“Add Key”，你就应该看到已经添加的Key. 第3步.添加远程库 登录GitHub,在右上角找到+号,点击选择 New repository,创建一个新的仓库 在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库 在本地的learngit仓库下运行命令： 1$ git remote add origin git@github.com:lxw-peter/learngit.git 下一步，就可以把本地库的所有内容推送到远程库上： 1$ git push -u origin master 从现在起，只要本地作了提交，就可以通过命令： 1$ git push origin master 把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！ ^PS: 第一次执行时会有SSH警告,可以忽略,但是如果担心的话,仔细对比下GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。 第4步.从远程库克隆首先，登陆GitHub，创建一个新的仓库，名字叫gitskills： 然后勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件： 现在，远程库已经准备好了，下一步是用命令git clone克隆一个本地库： 1234$ git clone git@github.com:lxw-peter/gitSkill.git$ cd gitSkill //进入gitSkill目录$ ls //打开文件列表$ cat test.md //打开文件内容 三.分支管理 创建分支 12$ git checkout -b devSwitched to a new branch 'dev' git checkout命令加上-b参数表示创建并切换,相当于以下两条命令: 123$ git branch dev$ git checkout devSwitched to branch 'dev' 查看分支 123$ git branch* dev master 提交分支 12$ git add ...$ git commit -m '这里是一条分支' 切换分支 1$ git checkout master 合并分支 1$ git merge dev //用于合并指定分支到当前分支 删除分支 12$ git branch -d devDeleted branch dev 确认分支 12$ git branch * master //删除分支后只剩下master一条分支","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-09-13T03:07:26.728Z","updated":"2018-09-13T03:54:27.478Z","comments":true,"path":"2018/09/13/hello-world/","link":"","permalink":"http://yoursite.com/2018/09/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 快速开始Create a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}